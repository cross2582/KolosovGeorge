
MR25H40.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d6c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002f00  08002f00  00012f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f38  08002f38  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002f38  08002f38  00012f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f40  08002f40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f40  08002f40  00012f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f44  08002f44  00012f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  08002fb8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08002fb8  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000984d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c4a  00000000  00000000  000298ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0002b538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  0002bd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e86  00000000  00000000  0002c400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008aad  00000000  00000000  00044286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008666b  00000000  00000000  0004cd33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d339e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002230  00000000  00000000  000d33f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002ee8 	.word	0x08002ee8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08002ee8 	.word	0x08002ee8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <_ZN7MR25H40D1Ev>:
 * Скажу честно пишу драйвер для какого либо устройства в первый раз поэтому очень сильно хотелось бы получить от вас обратную связь
 */

#include "MR25H40.h"
//конструктор и деструктор
MR25H40::~MR25H40(){}
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <_ZN7MR25H40D1Ev+0x1c>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4618      	mov	r0, r3
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	08002f18 	.word	0x08002f18

080004ec <_ZN7MR25H40D0Ev>:
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f7ff ffe9 	bl	80004cc <_ZN7MR25H40D1Ev>
 80004fa:	2110      	movs	r1, #16
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f002 fb7f 	bl	8002c00 <_ZdlPvj>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4618      	mov	r0, r3
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <_ZN7MR25H40C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
MR25H40::MR25H40(SPI_HandleTypeDef* mram_spi,GPIO_TypeDef* ss_port,uint16_t ss_pin):mram_spi_(mram_spi),ss_port_(ss_port),ss_pin_(ss_pin){}
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
 8000518:	807b      	strh	r3, [r7, #2]
 800051a:	4a09      	ldr	r2, [pc, #36]	; (8000540 <_ZN7MR25H40C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft+0x34>)
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	68ba      	ldr	r2, [r7, #8]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	887a      	ldrh	r2, [r7, #2]
 8000530:	819a      	strh	r2, [r3, #12]
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	4618      	mov	r0, r3
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	08002f18 	.word	0x08002f18

08000544 <_ZN7MR25H406EnableEv>:
//приватные методы
void MR25H40::Enable(){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ss_port_,ss_pin_,GPIO_PIN_RESET);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6898      	ldr	r0, [r3, #8]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	899b      	ldrh	r3, [r3, #12]
 8000554:	2200      	movs	r2, #0
 8000556:	4619      	mov	r1, r3
 8000558:	f001 f97c 	bl	8001854 <HAL_GPIO_WritePin>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <_ZN7MR25H407DisableEv>:
void MR25H40::Disable(){
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ss_port_,ss_pin_,GPIO_PIN_SET);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	6898      	ldr	r0, [r3, #8]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	899b      	ldrh	r3, [r3, #12]
 8000574:	2201      	movs	r2, #1
 8000576:	4619      	mov	r1, r3
 8000578:	f001 f96c 	bl	8001854 <HAL_GPIO_WritePin>
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <_ZN7MR25H408TransmitEPht>:
void MR25H40::Transmit(uint8_t* data,uint16_t size){
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	4613      	mov	r3, r2
 8000590:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(mram_spi_,data,size,HAL_MAX_DELAY);
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	6858      	ldr	r0, [r3, #4]
 8000596:	88fa      	ldrh	r2, [r7, #6]
 8000598:	f04f 33ff 	mov.w	r3, #4294967295
 800059c:	68b9      	ldr	r1, [r7, #8]
 800059e:	f001 fe10 	bl	80021c2 <HAL_SPI_Transmit>
}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <_ZN7MR25H407ReceiveEPht>:
void MR25H40::Receive(uint8_t* data,uint16_t size){
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b084      	sub	sp, #16
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	60f8      	str	r0, [r7, #12]
 80005b2:	60b9      	str	r1, [r7, #8]
 80005b4:	4613      	mov	r3, r2
 80005b6:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Receive(mram_spi_,data,size,HAL_MAX_DELAY);
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	6858      	ldr	r0, [r3, #4]
 80005bc:	88fa      	ldrh	r2, [r7, #6]
 80005be:	f04f 33ff 	mov.w	r3, #4294967295
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	f001 ff39 	bl	800243a <HAL_SPI_Receive>
}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <_ZN7MR25H4011WriteEnableEv>:
//включение записи
void MR25H40::WriteEnable(){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	Enable();
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff ffb3 	bl	8000544 <_ZN7MR25H406EnableEv>
	uint8_t buffer[1] = {WREN};
 80005de:	2306      	movs	r3, #6
 80005e0:	733b      	strb	r3, [r7, #12]
	Transmit(buffer,1);
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2201      	movs	r2, #1
 80005e8:	4619      	mov	r1, r3
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f7ff ffca 	bl	8000584 <_ZN7MR25H408TransmitEPht>
	Disable();
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f7ff ffb7 	bl	8000564 <_ZN7MR25H407DisableEv>
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <_ZN7MR25H4012WriteDisableEv>:
//выключение записи
void MR25H40::WriteDisable(){
 80005fe:	b580      	push	{r7, lr}
 8000600:	b084      	sub	sp, #16
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
	Enable();
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f7ff ff9c 	bl	8000544 <_ZN7MR25H406EnableEv>
	uint8_t buffer[1] = {WRDI};
 800060c:	2304      	movs	r3, #4
 800060e:	733b      	strb	r3, [r7, #12]
	Transmit(buffer,1);
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2201      	movs	r2, #1
 8000616:	4619      	mov	r1, r3
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f7ff ffb3 	bl	8000584 <_ZN7MR25H408TransmitEPht>
	Disable();
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f7ff ffa0 	bl	8000564 <_ZN7MR25H407DisableEv>
}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <_ZN7MR25H409WriteDataEmPht>:
	Transmit(buffer,2);
	Disable();

}
//запись данных в mram
void MR25H40::WriteData(uint32_t address,uint8_t* data, uint16_t size){
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	807b      	strh	r3, [r7, #2]
	uint8_t* status_register;
	ReadStatusRegister(status_register);
 800063a:	6979      	ldr	r1, [r7, #20]
 800063c:	68f8      	ldr	r0, [r7, #12]
 800063e:	f000 f836 	bl	80006ae <_ZN7MR25H4018ReadStatusRegisterEPh>
	if(!((*status_register)&0x02)){
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	2b00      	cmp	r3, #0
 800064c:	d102      	bne.n	8000654 <_ZN7MR25H409WriteDataEmPht+0x28>
		WriteEnable();
 800064e:	68f8      	ldr	r0, [r7, #12]
 8000650:	f7ff ffbe 	bl	80005d0 <_ZN7MR25H4011WriteEnableEv>
	}
	delete status_register;
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d003      	beq.n	8000662 <_ZN7MR25H409WriteDataEmPht+0x36>
 800065a:	2101      	movs	r1, #1
 800065c:	4618      	mov	r0, r3
 800065e:	f002 facf 	bl	8002c00 <_ZdlPvj>
	Enable();
 8000662:	68f8      	ldr	r0, [r7, #12]
 8000664:	f7ff ff6e 	bl	8000544 <_ZN7MR25H406EnableEv>
	uint8_t buffer[4]={WRITE,((address>>16)&0xFF),((address>>8)&0xFF),(address&0xFF)};
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	2302      	movs	r3, #2
 800066e:	743b      	strb	r3, [r7, #16]
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	0c1b      	lsrs	r3, r3, #16
 8000674:	b2db      	uxtb	r3, r3
 8000676:	747b      	strb	r3, [r7, #17]
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	0a1b      	lsrs	r3, r3, #8
 800067c:	b2db      	uxtb	r3, r3
 800067e:	74bb      	strb	r3, [r7, #18]
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	74fb      	strb	r3, [r7, #19]
	Transmit(buffer,4);
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	2204      	movs	r2, #4
 800068c:	4619      	mov	r1, r3
 800068e:	68f8      	ldr	r0, [r7, #12]
 8000690:	f7ff ff78 	bl	8000584 <_ZN7MR25H408TransmitEPht>
	Transmit(data,size);
 8000694:	887b      	ldrh	r3, [r7, #2]
 8000696:	461a      	mov	r2, r3
 8000698:	6879      	ldr	r1, [r7, #4]
 800069a:	68f8      	ldr	r0, [r7, #12]
 800069c:	f7ff ff72 	bl	8000584 <_ZN7MR25H408TransmitEPht>
	Disable();
 80006a0:	68f8      	ldr	r0, [r7, #12]
 80006a2:	f7ff ff5f 	bl	8000564 <_ZN7MR25H407DisableEv>
}
 80006a6:	bf00      	nop
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <_ZN7MR25H4018ReadStatusRegisterEPh>:
//чтение статус регистра
void MR25H40::ReadStatusRegister(uint8_t* status_register){
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b084      	sub	sp, #16
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
 80006b6:	6039      	str	r1, [r7, #0]
	Enable();
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff ff43 	bl	8000544 <_ZN7MR25H406EnableEv>
	uint8_t buffer[1] = {RDSR};
 80006be:	2305      	movs	r3, #5
 80006c0:	733b      	strb	r3, [r7, #12]
	Transmit(buffer,1);
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2201      	movs	r2, #1
 80006c8:	4619      	mov	r1, r3
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ff5a 	bl	8000584 <_ZN7MR25H408TransmitEPht>
	Receive(status_register,1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	6839      	ldr	r1, [r7, #0]
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ff68 	bl	80005aa <_ZN7MR25H407ReceiveEPht>
	Disable();
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f7ff ff42 	bl	8000564 <_ZN7MR25H407DisableEv>
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <_ZN7MR25H408ReadDataEmPht>:
//чтение данных из mram
void MR25H40::ReadData(uint32_t address,uint8_t* data, uint16_t size ){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
 80006f4:	807b      	strh	r3, [r7, #2]
	Enable();
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f7ff ff24 	bl	8000544 <_ZN7MR25H406EnableEv>
	uint8_t buffer[4]={READ,((address>>16)&0xFF),((address>>8)&0xFF),(address&0xFF)};
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	2303      	movs	r3, #3
 8000702:	753b      	strb	r3, [r7, #20]
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	0c1b      	lsrs	r3, r3, #16
 8000708:	b2db      	uxtb	r3, r3
 800070a:	757b      	strb	r3, [r7, #21]
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	0a1b      	lsrs	r3, r3, #8
 8000710:	b2db      	uxtb	r3, r3
 8000712:	75bb      	strb	r3, [r7, #22]
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	b2db      	uxtb	r3, r3
 8000718:	75fb      	strb	r3, [r7, #23]
	Transmit(buffer,4);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2204      	movs	r2, #4
 8000720:	4619      	mov	r1, r3
 8000722:	68f8      	ldr	r0, [r7, #12]
 8000724:	f7ff ff2e 	bl	8000584 <_ZN7MR25H408TransmitEPht>
	Receive(data,size);
 8000728:	887b      	ldrh	r3, [r7, #2]
 800072a:	461a      	mov	r2, r3
 800072c:	6879      	ldr	r1, [r7, #4]
 800072e:	68f8      	ldr	r0, [r7, #12]
 8000730:	f7ff ff3b 	bl	80005aa <_ZN7MR25H407ReceiveEPht>
	Disable();
 8000734:	68f8      	ldr	r0, [r7, #12]
 8000736:	f7ff ff15 	bl	8000564 <_ZN7MR25H407DisableEv>
}
 800073a:	bf00      	nop
 800073c:	3718      	adds	r7, #24
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b5b0      	push	{r4, r5, r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	MR25H40 mram(&hspi1,GPIOA,GPIO_PIN_4);//создаем объект класса с ss в gpioa(4pin)
 800074a:	4638      	mov	r0, r7
 800074c:	2310      	movs	r3, #16
 800074e:	4a1d      	ldr	r2, [pc, #116]	; (80007c4 <main+0x80>)
 8000750:	491d      	ldr	r1, [pc, #116]	; (80007c8 <main+0x84>)
 8000752:	f7ff fedb 	bl	800050c <_ZN7MR25H40C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
		size_t prog_qty;
		uint32_t math_qty;
		uint8_t head_qty;
		float salary_sum;
	};
	Bureau* test_in=new Bureau{1,2,3,4.0};//создаем объект структуры
 8000756:	2010      	movs	r0, #16
 8000758:	f002 fa54 	bl	8002c04 <_Znwj>
 800075c:	4603      	mov	r3, r0
 800075e:	461d      	mov	r5, r3
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <main+0x88>)
 8000762:	462c      	mov	r4, r5
 8000764:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000766:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800076a:	617d      	str	r5, [r7, #20]
	mram.WriteData(0, reinterpret_cast<uint8_t*>(test_in), sizeof(test_in));//записываем в память
 800076c:	4638      	mov	r0, r7
 800076e:	2304      	movs	r3, #4
 8000770:	697a      	ldr	r2, [r7, #20]
 8000772:	2100      	movs	r1, #0
 8000774:	f7ff ff5a 	bl	800062c <_ZN7MR25H409WriteDataEmPht>
	uint8_t* test_out;//делаем указатель для вывода из памяти
	mram.ReadData(0,test_out,sizeof(test_in));
 8000778:	4638      	mov	r0, r7
 800077a:	2304      	movs	r3, #4
 800077c:	693a      	ldr	r2, [r7, #16]
 800077e:	2100      	movs	r1, #0
 8000780:	f7ff ffb2 	bl	80006e8 <_ZN7MR25H408ReadDataEmPht>
	mram.WriteDisable();//выключаем запись
 8000784:	463b      	mov	r3, r7
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff39 	bl	80005fe <_ZN7MR25H4012WriteDisableEv>
	delete test_in;
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d003      	beq.n	800079a <main+0x56>
 8000792:	2110      	movs	r1, #16
 8000794:	4618      	mov	r0, r3
 8000796:	f002 fa33 	bl	8002c00 <_ZdlPvj>
	test_in=reinterpret_cast<Bureau*>(test_out);
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	617b      	str	r3, [r7, #20]
	delete test_out;
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d003      	beq.n	80007ac <main+0x68>
 80007a4:	2101      	movs	r1, #1
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fa2a 	bl	8002c00 <_ZdlPvj>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ac:	f000 fa60 	bl	8000c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b0:	f000 f80e 	bl	80007d0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f000 f8d2 	bl	800095c <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 80007b8:	f000 f874 	bl	80008a4 <_ZL12MX_SPI1_Initv>
  MX_DMA_Init();
 80007bc:	f000 f8ae 	bl	800091c <_ZL11MX_DMA_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <main+0x7c>
 80007c2:	bf00      	nop
 80007c4:	40020000 	.word	0x40020000
 80007c8:	2000008c 	.word	0x2000008c
 80007cc:	08002f00 	.word	0x08002f00

080007d0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	; 0x50
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	2230      	movs	r2, #48	; 0x30
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fa6e 	bl	8002cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	4b28      	ldr	r3, [pc, #160]	; (800089c <_Z18SystemClock_Configv+0xcc>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	4a27      	ldr	r2, [pc, #156]	; (800089c <_Z18SystemClock_Configv+0xcc>)
 80007fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000802:	6413      	str	r3, [r2, #64]	; 0x40
 8000804:	4b25      	ldr	r3, [pc, #148]	; (800089c <_Z18SystemClock_Configv+0xcc>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <_Z18SystemClock_Configv+0xd0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800081c:	4a20      	ldr	r2, [pc, #128]	; (80008a0 <_Z18SystemClock_Configv+0xd0>)
 800081e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <_Z18SystemClock_Configv+0xd0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000830:	2302      	movs	r3, #2
 8000832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000834:	2301      	movs	r3, #1
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000838:	2310      	movs	r3, #16
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800083c:	2300      	movs	r3, #0
 800083e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4618      	mov	r0, r3
 8000846:	f001 f81f 	bl	8001888 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	bf14      	ite	ne
 8000850:	2301      	movne	r3, #1
 8000852:	2300      	moveq	r3, #0
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 800085a:	f000 f899 	bl	8000990 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085e:	230f      	movs	r3, #15
 8000860:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f001 fa7d 	bl	8001d78 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	bf14      	ite	ne
 8000884:	2301      	movne	r3, #1
 8000886:	2300      	moveq	r3, #0
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 800088e:	f000 f87f 	bl	8000990 <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3750      	adds	r7, #80	; 0x50
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40007000 	.word	0x40007000

080008a4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <_ZL12MX_SPI1_Initv+0x70>)
 80008aa:	4a1b      	ldr	r2, [pc, #108]	; (8000918 <_ZL12MX_SPI1_Initv+0x74>)
 80008ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <_ZL12MX_SPI1_Initv+0x70>)
 80008b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <_ZL12MX_SPI1_Initv+0x70>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <_ZL12MX_SPI1_Initv+0x70>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <_ZL12MX_SPI1_Initv+0x70>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <_ZL12MX_SPI1_Initv+0x70>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <_ZL12MX_SPI1_Initv+0x70>)
 80008d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <_ZL12MX_SPI1_Initv+0x70>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008dc:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <_ZL12MX_SPI1_Initv+0x70>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <_ZL12MX_SPI1_Initv+0x70>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <_ZL12MX_SPI1_Initv+0x70>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <_ZL12MX_SPI1_Initv+0x70>)
 80008f0:	220a      	movs	r2, #10
 80008f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008f4:	4807      	ldr	r0, [pc, #28]	; (8000914 <_ZL12MX_SPI1_Initv+0x70>)
 80008f6:	f001 fbdb 	bl	80020b0 <HAL_SPI_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	bf14      	ite	ne
 8000900:	2301      	movne	r3, #1
 8000902:	2300      	moveq	r3, #0
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800090a:	f000 f841 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000008c 	.word	0x2000008c
 8000918:	40013000 	.word	0x40013000

0800091c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <_ZL11MX_DMA_Initv+0x3c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <_ZL11MX_DMA_Initv+0x3c>)
 800092c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <_ZL11MX_DMA_Initv+0x3c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	2038      	movs	r0, #56	; 0x38
 8000944:	f000 fae1 	bl	8000f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000948:	2038      	movs	r0, #56	; 0x38
 800094a:	f000 fafa 	bl	8000f42 <HAL_NVIC_EnableIRQ>

}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <_ZL12MX_GPIO_Initv+0x30>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <_ZL12MX_GPIO_Initv+0x30>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <_ZL12MX_GPIO_Initv+0x30>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	e7fe      	b.n	8000998 <Error_Handler+0x8>
	...

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	4a0f      	ldr	r2, [pc, #60]	; (80009e8 <HAL_MspInit+0x4c>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	; 0x44
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <HAL_MspInit+0x4c>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a30      	ldr	r2, [pc, #192]	; (8000acc <HAL_SPI_MspInit+0xe0>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d159      	bne.n	8000ac2 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	4b2f      	ldr	r3, [pc, #188]	; (8000ad0 <HAL_SPI_MspInit+0xe4>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	4a2e      	ldr	r2, [pc, #184]	; (8000ad0 <HAL_SPI_MspInit+0xe4>)
 8000a18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ad0 <HAL_SPI_MspInit+0xe4>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <HAL_SPI_MspInit+0xe4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a27      	ldr	r2, [pc, #156]	; (8000ad0 <HAL_SPI_MspInit+0xe4>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <HAL_SPI_MspInit+0xe4>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a46:	23f0      	movs	r3, #240	; 0xf0
 8000a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a56:	2305      	movs	r3, #5
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	481c      	ldr	r0, [pc, #112]	; (8000ad4 <HAL_SPI_MspInit+0xe8>)
 8000a62:	f000 fd73 	bl	800154c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <HAL_SPI_MspInit+0xec>)
 8000a68:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <HAL_SPI_MspInit+0xf0>)
 8000a6a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <HAL_SPI_MspInit+0xec>)
 8000a6e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000a72:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <HAL_SPI_MspInit+0xec>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <HAL_SPI_MspInit+0xec>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <HAL_SPI_MspInit+0xec>)
 8000a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a86:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <HAL_SPI_MspInit+0xec>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a8e:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_SPI_MspInit+0xec>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000a94:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <HAL_SPI_MspInit+0xec>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <HAL_SPI_MspInit+0xec>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aa0:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <HAL_SPI_MspInit+0xec>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000aa6:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <HAL_SPI_MspInit+0xec>)
 8000aa8:	f000 fa66 	bl	8000f78 <HAL_DMA_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000ab2:	f7ff ff6d 	bl	8000990 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_SPI_MspInit+0xec>)
 8000aba:	64da      	str	r2, [r3, #76]	; 0x4c
 8000abc:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <HAL_SPI_MspInit+0xec>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40013000 	.word	0x40013000
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	200000e4 	.word	0x200000e4
 8000adc:	40026410 	.word	0x40026410

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <MemManage_Handler+0x4>

08000af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <UsageFault_Handler+0x4>

08000afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2c:	f000 f8f2 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <DMA2_Stream0_IRQHandler+0x10>)
 8000b3a:	f000 facb 	bl	80010d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200000e4 	.word	0x200000e4

08000b48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
	return 1;
 8000b4c:	2301      	movs	r3, #1
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <_kill>:

int _kill(int pid, int sig)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b62:	f002 f873 	bl	8002c4c <__errno>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2216      	movs	r2, #22
 8000b6a:	601a      	str	r2, [r3, #0]
	return -1;
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_exit>:

void _exit (int status)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ffe7 	bl	8000b58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b8a:	e7fe      	b.n	8000b8a <_exit+0x12>

08000b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <_sbrk+0x5c>)
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <_sbrk+0x60>)
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <_sbrk+0x64>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <_sbrk+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d207      	bcs.n	8000bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bbc:	f002 f846 	bl	8002c4c <__errno>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20010000 	.word	0x20010000
 8000bec:	00000400 	.word	0x00000400
 8000bf0:	20000144 	.word	0x20000144
 8000bf4:	20000168 	.word	0x20000168

08000bf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <SystemInit+0x20>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <SystemInit+0x20>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c22:	490e      	ldr	r1, [pc, #56]	; (8000c5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c24:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c38:	4c0b      	ldr	r4, [pc, #44]	; (8000c68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c46:	f7ff ffd7 	bl	8000bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4a:	f002 f805 	bl	8002c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4e:	f7ff fd79 	bl	8000744 <main>
  bx  lr    
 8000c52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c54:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c60:	08002f48 	.word	0x08002f48
  ldr r2, =_sbss
 8000c64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c68:	20000168 	.word	0x20000168

08000c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC_IRQHandler>
	...

08000c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <HAL_Init+0x40>)
 8000c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_Init+0x40>)
 8000c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <HAL_Init+0x40>)
 8000c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 f92b 	bl	8000ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9e:	200f      	movs	r0, #15
 8000ca0:	f000 f808 	bl	8000cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca4:	f7ff fe7a 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023c00 	.word	0x40023c00

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_InitTick+0x54>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x58>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f943 	bl	8000f5e <HAL_SYSTICK_Config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00e      	b.n	8000d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d80a      	bhi.n	8000cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f000 f90b 	bl	8000f0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf4:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <HAL_InitTick+0x5c>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000004 	.word	0x20000004

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000154 	.word	0x20000154

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000154 	.word	0x20000154

08000d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0b      	blt.n	8000de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 021f 	and.w	r2, r3, #31
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <__NVIC_EnableIRQ+0x38>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	; (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	; (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	; 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec0:	d301      	bcc.n	8000ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00f      	b.n	8000ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <SysTick_Config+0x40>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ece:	210f      	movs	r1, #15
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f7ff ff8e 	bl	8000df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <SysTick_Config+0x40>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <SysTick_Config+0x40>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	e000e010 	.word	0xe000e010

08000ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff29 	bl	8000d54 <__NVIC_SetPriorityGrouping>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1c:	f7ff ff3e 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000f20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68b9      	ldr	r1, [r7, #8]
 8000f26:	6978      	ldr	r0, [r7, #20]
 8000f28:	f7ff ff8e 	bl	8000e48 <NVIC_EncodePriority>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff5d 	bl	8000df4 <__NVIC_SetPriority>
}
 8000f3a:	bf00      	nop
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff31 	bl	8000db8 <__NVIC_EnableIRQ>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ffa2 	bl	8000eb0 <SysTick_Config>
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff feda 	bl	8000d3c <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e099      	b.n	80010c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2202      	movs	r2, #2
 8000f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0201 	bic.w	r2, r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb4:	e00f      	b.n	8000fd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fb6:	f7ff fec1 	bl	8000d3c <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b05      	cmp	r3, #5
 8000fc2:	d908      	bls.n	8000fd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2220      	movs	r2, #32
 8000fc8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2203      	movs	r2, #3
 8000fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e078      	b.n	80010c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1e8      	bne.n	8000fb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	4b38      	ldr	r3, [pc, #224]	; (80010d0 <HAL_DMA_Init+0x158>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001002:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800100e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800101a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4313      	orrs	r3, r2
 8001026:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	2b04      	cmp	r3, #4
 800102e:	d107      	bne.n	8001040 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	4313      	orrs	r3, r2
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	4313      	orrs	r3, r2
 800103e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f023 0307 	bic.w	r3, r3, #7
 8001056:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	4313      	orrs	r3, r2
 8001060:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	2b04      	cmp	r3, #4
 8001068:	d117      	bne.n	800109a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4313      	orrs	r3, r2
 8001072:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00e      	beq.n	800109a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f9e9 	bl	8001454 <DMA_CheckFifoParam>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d008      	beq.n	800109a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2240      	movs	r2, #64	; 0x40
 800108c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2201      	movs	r2, #1
 8001092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001096:	2301      	movs	r3, #1
 8001098:	e016      	b.n	80010c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f9a0 	bl	80013e8 <DMA_CalcBaseAndBitshift>
 80010a8:	4603      	mov	r3, r0
 80010aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b0:	223f      	movs	r2, #63	; 0x3f
 80010b2:	409a      	lsls	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	f010803f 	.word	0xf010803f

080010d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80010e0:	4b92      	ldr	r3, [pc, #584]	; (800132c <HAL_DMA_IRQHandler+0x258>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a92      	ldr	r2, [pc, #584]	; (8001330 <HAL_DMA_IRQHandler+0x25c>)
 80010e6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ea:	0a9b      	lsrs	r3, r3, #10
 80010ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fe:	2208      	movs	r2, #8
 8001100:	409a      	lsls	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4013      	ands	r3, r2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d01a      	beq.n	8001140 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0204 	bic.w	r2, r2, #4
 8001126:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800112c:	2208      	movs	r2, #8
 800112e:	409a      	lsls	r2, r3
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001138:	f043 0201 	orr.w	r2, r3, #1
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001144:	2201      	movs	r2, #1
 8001146:	409a      	lsls	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4013      	ands	r3, r2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d012      	beq.n	8001176 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00b      	beq.n	8001176 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001162:	2201      	movs	r2, #1
 8001164:	409a      	lsls	r2, r3
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800116e:	f043 0202 	orr.w	r2, r3, #2
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117a:	2204      	movs	r2, #4
 800117c:	409a      	lsls	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4013      	ands	r3, r2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d012      	beq.n	80011ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00b      	beq.n	80011ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001198:	2204      	movs	r2, #4
 800119a:	409a      	lsls	r2, r3
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a4:	f043 0204 	orr.w	r2, r3, #4
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b0:	2210      	movs	r2, #16
 80011b2:	409a      	lsls	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4013      	ands	r3, r2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d043      	beq.n	8001244 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d03c      	beq.n	8001244 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ce:	2210      	movs	r2, #16
 80011d0:	409a      	lsls	r2, r3
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d018      	beq.n	8001216 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d108      	bne.n	8001204 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d024      	beq.n	8001244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	4798      	blx	r3
 8001202:	e01f      	b.n	8001244 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001208:	2b00      	cmp	r3, #0
 800120a:	d01b      	beq.n	8001244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	4798      	blx	r3
 8001214:	e016      	b.n	8001244 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001220:	2b00      	cmp	r3, #0
 8001222:	d107      	bne.n	8001234 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0208 	bic.w	r2, r2, #8
 8001232:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001248:	2220      	movs	r2, #32
 800124a:	409a      	lsls	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 808e 	beq.w	8001372 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0310 	and.w	r3, r3, #16
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 8086 	beq.w	8001372 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800126a:	2220      	movs	r2, #32
 800126c:	409a      	lsls	r2, r3
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b05      	cmp	r3, #5
 800127c:	d136      	bne.n	80012ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0216 	bic.w	r2, r2, #22
 800128c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	695a      	ldr	r2, [r3, #20]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800129c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d103      	bne.n	80012ae <HAL_DMA_IRQHandler+0x1da>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d007      	beq.n	80012be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0208 	bic.w	r2, r2, #8
 80012bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c2:	223f      	movs	r2, #63	; 0x3f
 80012c4:	409a      	lsls	r2, r3
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d07d      	beq.n	80013de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	4798      	blx	r3
        }
        return;
 80012ea:	e078      	b.n	80013de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d01c      	beq.n	8001334 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d108      	bne.n	800131a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130c:	2b00      	cmp	r3, #0
 800130e:	d030      	beq.n	8001372 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	4798      	blx	r3
 8001318:	e02b      	b.n	8001372 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800131e:	2b00      	cmp	r3, #0
 8001320:	d027      	beq.n	8001372 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	4798      	blx	r3
 800132a:	e022      	b.n	8001372 <HAL_DMA_IRQHandler+0x29e>
 800132c:	20000000 	.word	0x20000000
 8001330:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10f      	bne.n	8001362 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0210 	bic.w	r2, r2, #16
 8001350:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001376:	2b00      	cmp	r3, #0
 8001378:	d032      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d022      	beq.n	80013cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2205      	movs	r2, #5
 800138a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0201 	bic.w	r2, r2, #1
 800139c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	3301      	adds	r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d307      	bcc.n	80013ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f2      	bne.n	800139e <HAL_DMA_IRQHandler+0x2ca>
 80013b8:	e000      	b.n	80013bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80013ba:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d005      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	4798      	blx	r3
 80013dc:	e000      	b.n	80013e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80013de:	bf00      	nop
    }
  }
}
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop

080013e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	3b10      	subs	r3, #16
 80013f8:	4a14      	ldr	r2, [pc, #80]	; (800144c <DMA_CalcBaseAndBitshift+0x64>)
 80013fa:	fba2 2303 	umull	r2, r3, r2, r3
 80013fe:	091b      	lsrs	r3, r3, #4
 8001400:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001402:	4a13      	ldr	r2, [pc, #76]	; (8001450 <DMA_CalcBaseAndBitshift+0x68>)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b03      	cmp	r3, #3
 8001414:	d909      	bls.n	800142a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800141e:	f023 0303 	bic.w	r3, r3, #3
 8001422:	1d1a      	adds	r2, r3, #4
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	659a      	str	r2, [r3, #88]	; 0x58
 8001428:	e007      	b.n	800143a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001432:	f023 0303 	bic.w	r3, r3, #3
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800143e:	4618      	mov	r0, r3
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	aaaaaaab 	.word	0xaaaaaaab
 8001450:	08002f30 	.word	0x08002f30

08001454 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800145c:	2300      	movs	r3, #0
 800145e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d11f      	bne.n	80014ae <DMA_CheckFifoParam+0x5a>
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	2b03      	cmp	r3, #3
 8001472:	d856      	bhi.n	8001522 <DMA_CheckFifoParam+0xce>
 8001474:	a201      	add	r2, pc, #4	; (adr r2, 800147c <DMA_CheckFifoParam+0x28>)
 8001476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147a:	bf00      	nop
 800147c:	0800148d 	.word	0x0800148d
 8001480:	0800149f 	.word	0x0800149f
 8001484:	0800148d 	.word	0x0800148d
 8001488:	08001523 	.word	0x08001523
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d046      	beq.n	8001526 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800149c:	e043      	b.n	8001526 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014a6:	d140      	bne.n	800152a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014ac:	e03d      	b.n	800152a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014b6:	d121      	bne.n	80014fc <DMA_CheckFifoParam+0xa8>
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d837      	bhi.n	800152e <DMA_CheckFifoParam+0xda>
 80014be:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <DMA_CheckFifoParam+0x70>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	080014d5 	.word	0x080014d5
 80014c8:	080014db 	.word	0x080014db
 80014cc:	080014d5 	.word	0x080014d5
 80014d0:	080014ed 	.word	0x080014ed
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
      break;
 80014d8:	e030      	b.n	800153c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d025      	beq.n	8001532 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014ea:	e022      	b.n	8001532 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014f4:	d11f      	bne.n	8001536 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80014fa:	e01c      	b.n	8001536 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d903      	bls.n	800150a <DMA_CheckFifoParam+0xb6>
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	2b03      	cmp	r3, #3
 8001506:	d003      	beq.n	8001510 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001508:	e018      	b.n	800153c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	73fb      	strb	r3, [r7, #15]
      break;
 800150e:	e015      	b.n	800153c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00e      	beq.n	800153a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
      break;
 8001520:	e00b      	b.n	800153a <DMA_CheckFifoParam+0xe6>
      break;
 8001522:	bf00      	nop
 8001524:	e00a      	b.n	800153c <DMA_CheckFifoParam+0xe8>
      break;
 8001526:	bf00      	nop
 8001528:	e008      	b.n	800153c <DMA_CheckFifoParam+0xe8>
      break;
 800152a:	bf00      	nop
 800152c:	e006      	b.n	800153c <DMA_CheckFifoParam+0xe8>
      break;
 800152e:	bf00      	nop
 8001530:	e004      	b.n	800153c <DMA_CheckFifoParam+0xe8>
      break;
 8001532:	bf00      	nop
 8001534:	e002      	b.n	800153c <DMA_CheckFifoParam+0xe8>
      break;   
 8001536:	bf00      	nop
 8001538:	e000      	b.n	800153c <DMA_CheckFifoParam+0xe8>
      break;
 800153a:	bf00      	nop
    }
  } 
  
  return status; 
 800153c:	7bfb      	ldrb	r3, [r7, #15]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop

0800154c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	e159      	b.n	800181c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001568:	2201      	movs	r2, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	429a      	cmp	r2, r3
 8001582:	f040 8148 	bne.w	8001816 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	2b01      	cmp	r3, #1
 8001590:	d005      	beq.n	800159e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800159a:	2b02      	cmp	r3, #2
 800159c:	d130      	bne.n	8001600 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	2203      	movs	r2, #3
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d4:	2201      	movs	r2, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 0201 	and.w	r2, r3, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b03      	cmp	r3, #3
 800160a:	d017      	beq.n	800163c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d123      	bne.n	8001690 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	08da      	lsrs	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3208      	adds	r2, #8
 8001650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	220f      	movs	r2, #15
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	69b9      	ldr	r1, [r7, #24]
 800168c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0203 	and.w	r2, r3, #3
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80a2 	beq.w	8001816 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b57      	ldr	r3, [pc, #348]	; (8001834 <HAL_GPIO_Init+0x2e8>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a56      	ldr	r2, [pc, #344]	; (8001834 <HAL_GPIO_Init+0x2e8>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b54      	ldr	r3, [pc, #336]	; (8001834 <HAL_GPIO_Init+0x2e8>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ee:	4a52      	ldr	r2, [pc, #328]	; (8001838 <HAL_GPIO_Init+0x2ec>)
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	3302      	adds	r3, #2
 80016f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	220f      	movs	r2, #15
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a49      	ldr	r2, [pc, #292]	; (800183c <HAL_GPIO_Init+0x2f0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d019      	beq.n	800174e <HAL_GPIO_Init+0x202>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a48      	ldr	r2, [pc, #288]	; (8001840 <HAL_GPIO_Init+0x2f4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d013      	beq.n	800174a <HAL_GPIO_Init+0x1fe>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a47      	ldr	r2, [pc, #284]	; (8001844 <HAL_GPIO_Init+0x2f8>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d00d      	beq.n	8001746 <HAL_GPIO_Init+0x1fa>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a46      	ldr	r2, [pc, #280]	; (8001848 <HAL_GPIO_Init+0x2fc>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d007      	beq.n	8001742 <HAL_GPIO_Init+0x1f6>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a45      	ldr	r2, [pc, #276]	; (800184c <HAL_GPIO_Init+0x300>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d101      	bne.n	800173e <HAL_GPIO_Init+0x1f2>
 800173a:	2304      	movs	r3, #4
 800173c:	e008      	b.n	8001750 <HAL_GPIO_Init+0x204>
 800173e:	2307      	movs	r3, #7
 8001740:	e006      	b.n	8001750 <HAL_GPIO_Init+0x204>
 8001742:	2303      	movs	r3, #3
 8001744:	e004      	b.n	8001750 <HAL_GPIO_Init+0x204>
 8001746:	2302      	movs	r3, #2
 8001748:	e002      	b.n	8001750 <HAL_GPIO_Init+0x204>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <HAL_GPIO_Init+0x204>
 800174e:	2300      	movs	r3, #0
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	f002 0203 	and.w	r2, r2, #3
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	4093      	lsls	r3, r2
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001760:	4935      	ldr	r1, [pc, #212]	; (8001838 <HAL_GPIO_Init+0x2ec>)
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	3302      	adds	r3, #2
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800176e:	4b38      	ldr	r3, [pc, #224]	; (8001850 <HAL_GPIO_Init+0x304>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001792:	4a2f      	ldr	r2, [pc, #188]	; (8001850 <HAL_GPIO_Init+0x304>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001798:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <HAL_GPIO_Init+0x304>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017bc:	4a24      	ldr	r2, [pc, #144]	; (8001850 <HAL_GPIO_Init+0x304>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017c2:	4b23      	ldr	r3, [pc, #140]	; (8001850 <HAL_GPIO_Init+0x304>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017e6:	4a1a      	ldr	r2, [pc, #104]	; (8001850 <HAL_GPIO_Init+0x304>)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <HAL_GPIO_Init+0x304>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001810:	4a0f      	ldr	r2, [pc, #60]	; (8001850 <HAL_GPIO_Init+0x304>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3301      	adds	r3, #1
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	2b0f      	cmp	r3, #15
 8001820:	f67f aea2 	bls.w	8001568 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop
 8001828:	3724      	adds	r7, #36	; 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	40013800 	.word	0x40013800
 800183c:	40020000 	.word	0x40020000
 8001840:	40020400 	.word	0x40020400
 8001844:	40020800 	.word	0x40020800
 8001848:	40020c00 	.word	0x40020c00
 800184c:	40021000 	.word	0x40021000
 8001850:	40013c00 	.word	0x40013c00

08001854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
 8001860:	4613      	mov	r3, r2
 8001862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001864:	787b      	ldrb	r3, [r7, #1]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001870:	e003      	b.n	800187a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	041a      	lsls	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	619a      	str	r2, [r3, #24]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e264      	b.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d075      	beq.n	8001992 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018a6:	4ba3      	ldr	r3, [pc, #652]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d00c      	beq.n	80018cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018b2:	4ba0      	ldr	r3, [pc, #640]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d112      	bne.n	80018e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018be:	4b9d      	ldr	r3, [pc, #628]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ca:	d10b      	bne.n	80018e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	4b99      	ldr	r3, [pc, #612]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d05b      	beq.n	8001990 <HAL_RCC_OscConfig+0x108>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d157      	bne.n	8001990 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e23f      	b.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ec:	d106      	bne.n	80018fc <HAL_RCC_OscConfig+0x74>
 80018ee:	4b91      	ldr	r3, [pc, #580]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a90      	ldr	r2, [pc, #576]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e01d      	b.n	8001938 <HAL_RCC_OscConfig+0xb0>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x98>
 8001906:	4b8b      	ldr	r3, [pc, #556]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a8a      	ldr	r2, [pc, #552]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 800190c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b88      	ldr	r3, [pc, #544]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a87      	ldr	r2, [pc, #540]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e00b      	b.n	8001938 <HAL_RCC_OscConfig+0xb0>
 8001920:	4b84      	ldr	r3, [pc, #528]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a83      	ldr	r2, [pc, #524]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b81      	ldr	r3, [pc, #516]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a80      	ldr	r2, [pc, #512]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d013      	beq.n	8001968 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff f9fc 	bl	8000d3c <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff f9f8 	bl	8000d3c <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e204      	b.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	4b76      	ldr	r3, [pc, #472]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0xc0>
 8001966:	e014      	b.n	8001992 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff f9e8 	bl	8000d3c <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001970:	f7ff f9e4 	bl	8000d3c <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b64      	cmp	r3, #100	; 0x64
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e1f0      	b.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	4b6c      	ldr	r3, [pc, #432]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0xe8>
 800198e:	e000      	b.n	8001992 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d063      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800199e:	4b65      	ldr	r3, [pc, #404]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00b      	beq.n	80019c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019aa:	4b62      	ldr	r3, [pc, #392]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d11c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b6:	4b5f      	ldr	r3, [pc, #380]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d116      	bne.n	80019f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c2:	4b5c      	ldr	r3, [pc, #368]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <HAL_RCC_OscConfig+0x152>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d001      	beq.n	80019da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e1c4      	b.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019da:	4b56      	ldr	r3, [pc, #344]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4952      	ldr	r1, [pc, #328]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ee:	e03a      	b.n	8001a66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d020      	beq.n	8001a3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f8:	4b4f      	ldr	r3, [pc, #316]	; (8001b38 <HAL_RCC_OscConfig+0x2b0>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fe:	f7ff f99d 	bl	8000d3c <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a06:	f7ff f999 	bl	8000d3c <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e1a5      	b.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a18:	4b46      	ldr	r3, [pc, #280]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a24:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4940      	ldr	r1, [pc, #256]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
 8001a38:	e015      	b.n	8001a66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a3a:	4b3f      	ldr	r3, [pc, #252]	; (8001b38 <HAL_RCC_OscConfig+0x2b0>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff f97c 	bl	8000d3c <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a48:	f7ff f978 	bl	8000d3c <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e184      	b.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5a:	4b36      	ldr	r3, [pc, #216]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d030      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d016      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a7a:	4b30      	ldr	r3, [pc, #192]	; (8001b3c <HAL_RCC_OscConfig+0x2b4>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a80:	f7ff f95c 	bl	8000d3c <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a88:	f7ff f958 	bl	8000d3c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e164      	b.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x200>
 8001aa6:	e015      	b.n	8001ad4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa8:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <HAL_RCC_OscConfig+0x2b4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aae:	f7ff f945 	bl	8000d3c <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab6:	f7ff f941 	bl	8000d3c <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e14d      	b.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f0      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80a0 	beq.w	8001c22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10f      	bne.n	8001b12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a0e      	ldr	r2, [pc, #56]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_RCC_OscConfig+0x2b8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d121      	bne.n	8001b62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <HAL_RCC_OscConfig+0x2b8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a07      	ldr	r2, [pc, #28]	; (8001b40 <HAL_RCC_OscConfig+0x2b8>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff f907 	bl	8000d3c <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	e011      	b.n	8001b56 <HAL_RCC_OscConfig+0x2ce>
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	42470000 	.word	0x42470000
 8001b3c:	42470e80 	.word	0x42470e80
 8001b40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b44:	f7ff f8fa 	bl	8000d3c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e106      	b.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b56:	4b85      	ldr	r3, [pc, #532]	; (8001d6c <HAL_RCC_OscConfig+0x4e4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d106      	bne.n	8001b78 <HAL_RCC_OscConfig+0x2f0>
 8001b6a:	4b81      	ldr	r3, [pc, #516]	; (8001d70 <HAL_RCC_OscConfig+0x4e8>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6e:	4a80      	ldr	r2, [pc, #512]	; (8001d70 <HAL_RCC_OscConfig+0x4e8>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6713      	str	r3, [r2, #112]	; 0x70
 8001b76:	e01c      	b.n	8001bb2 <HAL_RCC_OscConfig+0x32a>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b05      	cmp	r3, #5
 8001b7e:	d10c      	bne.n	8001b9a <HAL_RCC_OscConfig+0x312>
 8001b80:	4b7b      	ldr	r3, [pc, #492]	; (8001d70 <HAL_RCC_OscConfig+0x4e8>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	4a7a      	ldr	r2, [pc, #488]	; (8001d70 <HAL_RCC_OscConfig+0x4e8>)
 8001b86:	f043 0304 	orr.w	r3, r3, #4
 8001b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b8c:	4b78      	ldr	r3, [pc, #480]	; (8001d70 <HAL_RCC_OscConfig+0x4e8>)
 8001b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b90:	4a77      	ldr	r2, [pc, #476]	; (8001d70 <HAL_RCC_OscConfig+0x4e8>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6713      	str	r3, [r2, #112]	; 0x70
 8001b98:	e00b      	b.n	8001bb2 <HAL_RCC_OscConfig+0x32a>
 8001b9a:	4b75      	ldr	r3, [pc, #468]	; (8001d70 <HAL_RCC_OscConfig+0x4e8>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9e:	4a74      	ldr	r2, [pc, #464]	; (8001d70 <HAL_RCC_OscConfig+0x4e8>)
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba6:	4b72      	ldr	r3, [pc, #456]	; (8001d70 <HAL_RCC_OscConfig+0x4e8>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001baa:	4a71      	ldr	r2, [pc, #452]	; (8001d70 <HAL_RCC_OscConfig+0x4e8>)
 8001bac:	f023 0304 	bic.w	r3, r3, #4
 8001bb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d015      	beq.n	8001be6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bba:	f7ff f8bf 	bl	8000d3c <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc0:	e00a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc2:	f7ff f8bb 	bl	8000d3c <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e0c5      	b.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd8:	4b65      	ldr	r3, [pc, #404]	; (8001d70 <HAL_RCC_OscConfig+0x4e8>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0ee      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x33a>
 8001be4:	e014      	b.n	8001c10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be6:	f7ff f8a9 	bl	8000d3c <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bec:	e00a      	b.n	8001c04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7ff f8a5 	bl	8000d3c <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e0af      	b.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c04:	4b5a      	ldr	r3, [pc, #360]	; (8001d70 <HAL_RCC_OscConfig+0x4e8>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1ee      	bne.n	8001bee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d105      	bne.n	8001c22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c16:	4b56      	ldr	r3, [pc, #344]	; (8001d70 <HAL_RCC_OscConfig+0x4e8>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	4a55      	ldr	r2, [pc, #340]	; (8001d70 <HAL_RCC_OscConfig+0x4e8>)
 8001c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 809b 	beq.w	8001d62 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c2c:	4b50      	ldr	r3, [pc, #320]	; (8001d70 <HAL_RCC_OscConfig+0x4e8>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 030c 	and.w	r3, r3, #12
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d05c      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d141      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c40:	4b4c      	ldr	r3, [pc, #304]	; (8001d74 <HAL_RCC_OscConfig+0x4ec>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c46:	f7ff f879 	bl	8000d3c <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7ff f875 	bl	8000d3c <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e081      	b.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c60:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <HAL_RCC_OscConfig+0x4e8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f0      	bne.n	8001c4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69da      	ldr	r2, [r3, #28]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	019b      	lsls	r3, r3, #6
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	085b      	lsrs	r3, r3, #1
 8001c84:	3b01      	subs	r3, #1
 8001c86:	041b      	lsls	r3, r3, #16
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8e:	061b      	lsls	r3, r3, #24
 8001c90:	4937      	ldr	r1, [pc, #220]	; (8001d70 <HAL_RCC_OscConfig+0x4e8>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c96:	4b37      	ldr	r3, [pc, #220]	; (8001d74 <HAL_RCC_OscConfig+0x4ec>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff f84e 	bl	8000d3c <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7ff f84a 	bl	8000d3c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e056      	b.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb6:	4b2e      	ldr	r3, [pc, #184]	; (8001d70 <HAL_RCC_OscConfig+0x4e8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x41c>
 8001cc2:	e04e      	b.n	8001d62 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	; (8001d74 <HAL_RCC_OscConfig+0x4ec>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7ff f837 	bl	8000d3c <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7ff f833 	bl	8000d3c <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e03f      	b.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce4:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <HAL_RCC_OscConfig+0x4e8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f0      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x44a>
 8001cf0:	e037      	b.n	8001d62 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e032      	b.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <HAL_RCC_OscConfig+0x4e8>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d028      	beq.n	8001d5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d121      	bne.n	8001d5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d11a      	bne.n	8001d5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d2e:	4013      	ands	r3, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d34:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d111      	bne.n	8001d5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	085b      	lsrs	r3, r3, #1
 8001d46:	3b01      	subs	r3, #1
 8001d48:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d001      	beq.n	8001d62 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	40023800 	.word	0x40023800
 8001d74:	42470060 	.word	0x42470060

08001d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0cc      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d8c:	4b68      	ldr	r3, [pc, #416]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d90c      	bls.n	8001db4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9a:	4b65      	ldr	r3, [pc, #404]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da2:	4b63      	ldr	r3, [pc, #396]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0b8      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d020      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dcc:	4b59      	ldr	r3, [pc, #356]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	4a58      	ldr	r2, [pc, #352]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de4:	4b53      	ldr	r3, [pc, #332]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4a52      	ldr	r2, [pc, #328]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df0:	4b50      	ldr	r3, [pc, #320]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	494d      	ldr	r1, [pc, #308]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d044      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d107      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	4b47      	ldr	r3, [pc, #284]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d119      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e07f      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d003      	beq.n	8001e36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d107      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e36:	4b3f      	ldr	r3, [pc, #252]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d109      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e06f      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e46:	4b3b      	ldr	r3, [pc, #236]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e067      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e56:	4b37      	ldr	r3, [pc, #220]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f023 0203 	bic.w	r2, r3, #3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4934      	ldr	r1, [pc, #208]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e68:	f7fe ff68 	bl	8000d3c <HAL_GetTick>
 8001e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6e:	e00a      	b.n	8001e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e70:	f7fe ff64 	bl	8000d3c <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e04f      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 020c 	and.w	r2, r3, #12
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d1eb      	bne.n	8001e70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e98:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d20c      	bcs.n	8001ec0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e032      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d008      	beq.n	8001ede <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4916      	ldr	r1, [pc, #88]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d009      	beq.n	8001efe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eea:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	490e      	ldr	r1, [pc, #56]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001efe:	f000 f821 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 8001f02:	4602      	mov	r2, r0
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	490a      	ldr	r1, [pc, #40]	; (8001f38 <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	5ccb      	ldrb	r3, [r1, r3]
 8001f12:	fa22 f303 	lsr.w	r3, r2, r3
 8001f16:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fec8 	bl	8000cb4 <HAL_InitTick>

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023c00 	.word	0x40023c00
 8001f34:	40023800 	.word	0x40023800
 8001f38:	08002f20 	.word	0x08002f20
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000004 	.word	0x20000004

08001f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f44:	b5b0      	push	{r4, r5, r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	6079      	str	r1, [r7, #4]
 8001f4e:	2100      	movs	r1, #0
 8001f50:	60f9      	str	r1, [r7, #12]
 8001f52:	2100      	movs	r1, #0
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f56:	2100      	movs	r1, #0
 8001f58:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f5a:	4952      	ldr	r1, [pc, #328]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f5c:	6889      	ldr	r1, [r1, #8]
 8001f5e:	f001 010c 	and.w	r1, r1, #12
 8001f62:	2908      	cmp	r1, #8
 8001f64:	d00d      	beq.n	8001f82 <HAL_RCC_GetSysClockFreq+0x3e>
 8001f66:	2908      	cmp	r1, #8
 8001f68:	f200 8094 	bhi.w	8002094 <HAL_RCC_GetSysClockFreq+0x150>
 8001f6c:	2900      	cmp	r1, #0
 8001f6e:	d002      	beq.n	8001f76 <HAL_RCC_GetSysClockFreq+0x32>
 8001f70:	2904      	cmp	r1, #4
 8001f72:	d003      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x38>
 8001f74:	e08e      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f76:	4b4c      	ldr	r3, [pc, #304]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001f78:	60bb      	str	r3, [r7, #8]
       break;
 8001f7a:	e08e      	b.n	800209a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f7c:	4b4b      	ldr	r3, [pc, #300]	; (80020ac <HAL_RCC_GetSysClockFreq+0x168>)
 8001f7e:	60bb      	str	r3, [r7, #8]
      break;
 8001f80:	e08b      	b.n	800209a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f82:	4948      	ldr	r1, [pc, #288]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f84:	6849      	ldr	r1, [r1, #4]
 8001f86:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001f8a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f8c:	4945      	ldr	r1, [pc, #276]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f8e:	6849      	ldr	r1, [r1, #4]
 8001f90:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001f94:	2900      	cmp	r1, #0
 8001f96:	d024      	beq.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f98:	4942      	ldr	r1, [pc, #264]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f9a:	6849      	ldr	r1, [r1, #4]
 8001f9c:	0989      	lsrs	r1, r1, #6
 8001f9e:	4608      	mov	r0, r1
 8001fa0:	f04f 0100 	mov.w	r1, #0
 8001fa4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001fa8:	f04f 0500 	mov.w	r5, #0
 8001fac:	ea00 0204 	and.w	r2, r0, r4
 8001fb0:	ea01 0305 	and.w	r3, r1, r5
 8001fb4:	493d      	ldr	r1, [pc, #244]	; (80020ac <HAL_RCC_GetSysClockFreq+0x168>)
 8001fb6:	fb01 f003 	mul.w	r0, r1, r3
 8001fba:	2100      	movs	r1, #0
 8001fbc:	fb01 f102 	mul.w	r1, r1, r2
 8001fc0:	1844      	adds	r4, r0, r1
 8001fc2:	493a      	ldr	r1, [pc, #232]	; (80020ac <HAL_RCC_GetSysClockFreq+0x168>)
 8001fc4:	fba2 0101 	umull	r0, r1, r2, r1
 8001fc8:	1863      	adds	r3, r4, r1
 8001fca:	4619      	mov	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	f7fe f8fe 	bl	80001d4 <__aeabi_uldivmod>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4613      	mov	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	e04a      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe2:	4b30      	ldr	r3, [pc, #192]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	099b      	lsrs	r3, r3, #6
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ff2:	f04f 0100 	mov.w	r1, #0
 8001ff6:	ea02 0400 	and.w	r4, r2, r0
 8001ffa:	ea03 0501 	and.w	r5, r3, r1
 8001ffe:	4620      	mov	r0, r4
 8002000:	4629      	mov	r1, r5
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	014b      	lsls	r3, r1, #5
 800200c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002010:	0142      	lsls	r2, r0, #5
 8002012:	4610      	mov	r0, r2
 8002014:	4619      	mov	r1, r3
 8002016:	1b00      	subs	r0, r0, r4
 8002018:	eb61 0105 	sbc.w	r1, r1, r5
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	018b      	lsls	r3, r1, #6
 8002026:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800202a:	0182      	lsls	r2, r0, #6
 800202c:	1a12      	subs	r2, r2, r0
 800202e:	eb63 0301 	sbc.w	r3, r3, r1
 8002032:	f04f 0000 	mov.w	r0, #0
 8002036:	f04f 0100 	mov.w	r1, #0
 800203a:	00d9      	lsls	r1, r3, #3
 800203c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002040:	00d0      	lsls	r0, r2, #3
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	1912      	adds	r2, r2, r4
 8002048:	eb45 0303 	adc.w	r3, r5, r3
 800204c:	f04f 0000 	mov.w	r0, #0
 8002050:	f04f 0100 	mov.w	r1, #0
 8002054:	0299      	lsls	r1, r3, #10
 8002056:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800205a:	0290      	lsls	r0, r2, #10
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4610      	mov	r0, r2
 8002062:	4619      	mov	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	461a      	mov	r2, r3
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	f7fe f8b2 	bl	80001d4 <__aeabi_uldivmod>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4613      	mov	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	0c1b      	lsrs	r3, r3, #16
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	3301      	adds	r3, #1
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002090:	60bb      	str	r3, [r7, #8]
      break;
 8002092:	e002      	b.n	800209a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002096:	60bb      	str	r3, [r7, #8]
      break;
 8002098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800209a:	68bb      	ldr	r3, [r7, #8]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bdb0      	pop	{r4, r5, r7, pc}
 80020a4:	40023800 	.word	0x40023800
 80020a8:	00f42400 	.word	0x00f42400
 80020ac:	017d7840 	.word	0x017d7840

080020b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e07b      	b.n	80021ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d108      	bne.n	80020dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020d2:	d009      	beq.n	80020e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	61da      	str	r2, [r3, #28]
 80020da:	e005      	b.n	80020e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d106      	bne.n	8002108 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe fc72 	bl	80009ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800211e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216c:	ea42 0103 	orr.w	r1, r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	0c1b      	lsrs	r3, r3, #16
 8002186:	f003 0104 	and.w	r1, r3, #4
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	f003 0210 	and.w	r2, r3, #16
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	69da      	ldr	r2, [r3, #28]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b088      	sub	sp, #32
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	4613      	mov	r3, r2
 80021d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_SPI_Transmit+0x22>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e126      	b.n	8002432 <HAL_SPI_Transmit+0x270>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021ec:	f7fe fda6 	bl	8000d3c <HAL_GetTick>
 80021f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d002      	beq.n	8002208 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002202:	2302      	movs	r3, #2
 8002204:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002206:	e10b      	b.n	8002420 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_SPI_Transmit+0x52>
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002218:	e102      	b.n	8002420 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2203      	movs	r2, #3
 800221e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	88fa      	ldrh	r2, [r7, #6]
 8002232:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	88fa      	ldrh	r2, [r7, #6]
 8002238:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002260:	d10f      	bne.n	8002282 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002270:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002280:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228c:	2b40      	cmp	r3, #64	; 0x40
 800228e:	d007      	beq.n	80022a0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800229e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022a8:	d14b      	bne.n	8002342 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <HAL_SPI_Transmit+0xf6>
 80022b2:	8afb      	ldrh	r3, [r7, #22]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d13e      	bne.n	8002336 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	881a      	ldrh	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	1c9a      	adds	r2, r3, #2
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022dc:	e02b      	b.n	8002336 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d112      	bne.n	8002312 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	881a      	ldrh	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	1c9a      	adds	r2, r3, #2
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002310:	e011      	b.n	8002336 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002312:	f7fe fd13 	bl	8000d3c <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d803      	bhi.n	800232a <HAL_SPI_Transmit+0x168>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d102      	bne.n	8002330 <HAL_SPI_Transmit+0x16e>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002334:	e074      	b.n	8002420 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800233a:	b29b      	uxth	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ce      	bne.n	80022de <HAL_SPI_Transmit+0x11c>
 8002340:	e04c      	b.n	80023dc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <HAL_SPI_Transmit+0x18e>
 800234a:	8afb      	ldrh	r3, [r7, #22]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d140      	bne.n	80023d2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	330c      	adds	r3, #12
 800235a:	7812      	ldrb	r2, [r2, #0]
 800235c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002376:	e02c      	b.n	80023d2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d113      	bne.n	80023ae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	330c      	adds	r3, #12
 8002390:	7812      	ldrb	r2, [r2, #0]
 8002392:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80023ac:	e011      	b.n	80023d2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023ae:	f7fe fcc5 	bl	8000d3c <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d803      	bhi.n	80023c6 <HAL_SPI_Transmit+0x204>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d102      	bne.n	80023cc <HAL_SPI_Transmit+0x20a>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d102      	bne.n	80023d2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023d0:	e026      	b.n	8002420 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1cd      	bne.n	8002378 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	6839      	ldr	r1, [r7, #0]
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 fbcb 	bl	8002b7c <SPI_EndRxTxTransaction>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2220      	movs	r2, #32
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10a      	bne.n	8002410 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002414:	2b00      	cmp	r3, #0
 8002416:	d002      	beq.n	800241e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	77fb      	strb	r3, [r7, #31]
 800241c:	e000      	b.n	8002420 <HAL_SPI_Transmit+0x25e>
  }

error:
 800241e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002430:	7ffb      	ldrb	r3, [r7, #31]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3720      	adds	r7, #32
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b088      	sub	sp, #32
 800243e:	af02      	add	r7, sp, #8
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	4613      	mov	r3, r2
 8002448:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002456:	d112      	bne.n	800247e <HAL_SPI_Receive+0x44>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10e      	bne.n	800247e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2204      	movs	r2, #4
 8002464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002468:	88fa      	ldrh	r2, [r7, #6]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	4613      	mov	r3, r2
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	68b9      	ldr	r1, [r7, #8]
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f8f1 	bl	800265c <HAL_SPI_TransmitReceive>
 800247a:	4603      	mov	r3, r0
 800247c:	e0ea      	b.n	8002654 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_SPI_Receive+0x52>
 8002488:	2302      	movs	r3, #2
 800248a:	e0e3      	b.n	8002654 <HAL_SPI_Receive+0x21a>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002494:	f7fe fc52 	bl	8000d3c <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d002      	beq.n	80024ac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80024a6:	2302      	movs	r3, #2
 80024a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024aa:	e0ca      	b.n	8002642 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <HAL_SPI_Receive+0x7e>
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d102      	bne.n	80024be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024bc:	e0c1      	b.n	8002642 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2204      	movs	r2, #4
 80024c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	88fa      	ldrh	r2, [r7, #6]
 80024d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	88fa      	ldrh	r2, [r7, #6]
 80024dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002504:	d10f      	bne.n	8002526 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002514:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002524:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002530:	2b40      	cmp	r3, #64	; 0x40
 8002532:	d007      	beq.n	8002544 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002542:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d162      	bne.n	8002612 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800254c:	e02e      	b.n	80025ac <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b01      	cmp	r3, #1
 800255a:	d115      	bne.n	8002588 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f103 020c 	add.w	r2, r3, #12
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002568:	7812      	ldrb	r2, [r2, #0]
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002586:	e011      	b.n	80025ac <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002588:	f7fe fbd8 	bl	8000d3c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d803      	bhi.n	80025a0 <HAL_SPI_Receive+0x166>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259e:	d102      	bne.n	80025a6 <HAL_SPI_Receive+0x16c>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d102      	bne.n	80025ac <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80025aa:	e04a      	b.n	8002642 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1cb      	bne.n	800254e <HAL_SPI_Receive+0x114>
 80025b6:	e031      	b.n	800261c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d113      	bne.n	80025ee <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d0:	b292      	uxth	r2, r2
 80025d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	1c9a      	adds	r2, r3, #2
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025ec:	e011      	b.n	8002612 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025ee:	f7fe fba5 	bl	8000d3c <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d803      	bhi.n	8002606 <HAL_SPI_Receive+0x1cc>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002604:	d102      	bne.n	800260c <HAL_SPI_Receive+0x1d2>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d102      	bne.n	8002612 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002610:	e017      	b.n	8002642 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002616:	b29b      	uxth	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1cd      	bne.n	80025b8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	6839      	ldr	r1, [r7, #0]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fa45 	bl	8002ab0 <SPI_EndRxTransaction>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	75fb      	strb	r3, [r7, #23]
 800263e:	e000      	b.n	8002642 <HAL_SPI_Receive+0x208>
  }

error :
 8002640:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002652:	7dfb      	ldrb	r3, [r7, #23]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08c      	sub	sp, #48	; 0x30
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800266a:	2301      	movs	r3, #1
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_SPI_TransmitReceive+0x26>
 800267e:	2302      	movs	r3, #2
 8002680:	e18a      	b.n	8002998 <HAL_SPI_TransmitReceive+0x33c>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800268a:	f7fe fb57 	bl	8000d3c <HAL_GetTick>
 800268e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80026a0:	887b      	ldrh	r3, [r7, #2]
 80026a2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d00f      	beq.n	80026cc <HAL_SPI_TransmitReceive+0x70>
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026b2:	d107      	bne.n	80026c4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d103      	bne.n	80026c4 <HAL_SPI_TransmitReceive+0x68>
 80026bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d003      	beq.n	80026cc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
 80026c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026ca:	e15b      	b.n	8002984 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d005      	beq.n	80026de <HAL_SPI_TransmitReceive+0x82>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <HAL_SPI_TransmitReceive+0x82>
 80026d8:	887b      	ldrh	r3, [r7, #2]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d103      	bne.n	80026e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026e4:	e14e      	b.n	8002984 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d003      	beq.n	80026fa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2205      	movs	r2, #5
 80026f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	887a      	ldrh	r2, [r7, #2]
 800270a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	887a      	ldrh	r2, [r7, #2]
 8002710:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	887a      	ldrh	r2, [r7, #2]
 800271c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	887a      	ldrh	r2, [r7, #2]
 8002722:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273a:	2b40      	cmp	r3, #64	; 0x40
 800273c:	d007      	beq.n	800274e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800274c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002756:	d178      	bne.n	800284a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <HAL_SPI_TransmitReceive+0x10a>
 8002760:	8b7b      	ldrh	r3, [r7, #26]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d166      	bne.n	8002834 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	881a      	ldrh	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	1c9a      	adds	r2, r3, #2
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002780:	b29b      	uxth	r3, r3
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800278a:	e053      	b.n	8002834 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b02      	cmp	r3, #2
 8002798:	d11b      	bne.n	80027d2 <HAL_SPI_TransmitReceive+0x176>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d016      	beq.n	80027d2 <HAL_SPI_TransmitReceive+0x176>
 80027a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d113      	bne.n	80027d2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	881a      	ldrh	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	1c9a      	adds	r2, r3, #2
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d119      	bne.n	8002814 <HAL_SPI_TransmitReceive+0x1b8>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d014      	beq.n	8002814 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	b292      	uxth	r2, r2
 80027f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fc:	1c9a      	adds	r2, r3, #2
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002806:	b29b      	uxth	r3, r3
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002810:	2301      	movs	r3, #1
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002814:	f7fe fa92 	bl	8000d3c <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002820:	429a      	cmp	r2, r3
 8002822:	d807      	bhi.n	8002834 <HAL_SPI_TransmitReceive+0x1d8>
 8002824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282a:	d003      	beq.n	8002834 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002832:	e0a7      	b.n	8002984 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002838:	b29b      	uxth	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1a6      	bne.n	800278c <HAL_SPI_TransmitReceive+0x130>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002842:	b29b      	uxth	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1a1      	bne.n	800278c <HAL_SPI_TransmitReceive+0x130>
 8002848:	e07c      	b.n	8002944 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <HAL_SPI_TransmitReceive+0x1fc>
 8002852:	8b7b      	ldrh	r3, [r7, #26]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d16b      	bne.n	8002930 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	330c      	adds	r3, #12
 8002862:	7812      	ldrb	r2, [r2, #0]
 8002864:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800287e:	e057      	b.n	8002930 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b02      	cmp	r3, #2
 800288c:	d11c      	bne.n	80028c8 <HAL_SPI_TransmitReceive+0x26c>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002892:	b29b      	uxth	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d017      	beq.n	80028c8 <HAL_SPI_TransmitReceive+0x26c>
 8002898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289a:	2b01      	cmp	r3, #1
 800289c:	d114      	bne.n	80028c8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	330c      	adds	r3, #12
 80028a8:	7812      	ldrb	r2, [r2, #0]
 80028aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d119      	bne.n	800290a <HAL_SPI_TransmitReceive+0x2ae>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d014      	beq.n	800290a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002906:	2301      	movs	r3, #1
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800290a:	f7fe fa17 	bl	8000d3c <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002916:	429a      	cmp	r2, r3
 8002918:	d803      	bhi.n	8002922 <HAL_SPI_TransmitReceive+0x2c6>
 800291a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d102      	bne.n	8002928 <HAL_SPI_TransmitReceive+0x2cc>
 8002922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002924:	2b00      	cmp	r3, #0
 8002926:	d103      	bne.n	8002930 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800292e:	e029      	b.n	8002984 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1a2      	bne.n	8002880 <HAL_SPI_TransmitReceive+0x224>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293e:	b29b      	uxth	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d19d      	bne.n	8002880 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002946:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f917 	bl	8002b7c <SPI_EndRxTxTransaction>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d006      	beq.n	8002962 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2220      	movs	r2, #32
 800295e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002960:	e010      	b.n	8002984 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10b      	bne.n	8002982 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	e000      	b.n	8002984 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002982:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002994:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002998:	4618      	mov	r0, r3
 800299a:	3730      	adds	r7, #48	; 0x30
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	4613      	mov	r3, r2
 80029ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029b0:	f7fe f9c4 	bl	8000d3c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	4413      	add	r3, r2
 80029be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029c0:	f7fe f9bc 	bl	8000d3c <HAL_GetTick>
 80029c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029c6:	4b39      	ldr	r3, [pc, #228]	; (8002aac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	015b      	lsls	r3, r3, #5
 80029cc:	0d1b      	lsrs	r3, r3, #20
 80029ce:	69fa      	ldr	r2, [r7, #28]
 80029d0:	fb02 f303 	mul.w	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029d6:	e054      	b.n	8002a82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029de:	d050      	beq.n	8002a82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029e0:	f7fe f9ac 	bl	8000d3c <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	69fa      	ldr	r2, [r7, #28]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d902      	bls.n	80029f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d13d      	bne.n	8002a72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a0e:	d111      	bne.n	8002a34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a18:	d004      	beq.n	8002a24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a22:	d107      	bne.n	8002a34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a3c:	d10f      	bne.n	8002a5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e017      	b.n	8002aa2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	bf0c      	ite	eq
 8002a92:	2301      	moveq	r3, #1
 8002a94:	2300      	movne	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	461a      	mov	r2, r3
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d19b      	bne.n	80029d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3720      	adds	r7, #32
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000000 	.word	0x20000000

08002ab0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ac4:	d111      	bne.n	8002aea <SPI_EndRxTransaction+0x3a>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ace:	d004      	beq.n	8002ada <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad8:	d107      	bne.n	8002aea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ae8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002af2:	d12a      	bne.n	8002b4a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afc:	d012      	beq.n	8002b24 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2200      	movs	r2, #0
 8002b06:	2180      	movs	r1, #128	; 0x80
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f7ff ff49 	bl	80029a0 <SPI_WaitFlagStateUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d02d      	beq.n	8002b70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b18:	f043 0220 	orr.w	r2, r3, #32
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e026      	b.n	8002b72 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f7ff ff36 	bl	80029a0 <SPI_WaitFlagStateUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d01a      	beq.n	8002b70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3e:	f043 0220 	orr.w	r2, r3, #32
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e013      	b.n	8002b72 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2200      	movs	r2, #0
 8002b52:	2101      	movs	r1, #1
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f7ff ff23 	bl	80029a0 <SPI_WaitFlagStateUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d007      	beq.n	8002b70 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b64:	f043 0220 	orr.w	r2, r3, #32
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e000      	b.n	8002b72 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b88:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <SPI_EndRxTxTransaction+0x7c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1b      	ldr	r2, [pc, #108]	; (8002bfc <SPI_EndRxTxTransaction+0x80>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	0d5b      	lsrs	r3, r3, #21
 8002b94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b98:	fb02 f303 	mul.w	r3, r2, r3
 8002b9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ba6:	d112      	bne.n	8002bce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2180      	movs	r1, #128	; 0x80
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f7ff fef4 	bl	80029a0 <SPI_WaitFlagStateUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d016      	beq.n	8002bec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc2:	f043 0220 	orr.w	r2, r3, #32
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e00f      	b.n	8002bee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be4:	2b80      	cmp	r3, #128	; 0x80
 8002be6:	d0f2      	beq.n	8002bce <SPI_EndRxTxTransaction+0x52>
 8002be8:	e000      	b.n	8002bec <SPI_EndRxTxTransaction+0x70>
        break;
 8002bea:	bf00      	nop
  }

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	165e9f81 	.word	0x165e9f81

08002c00 <_ZdlPvj>:
 8002c00:	f000 b811 	b.w	8002c26 <_ZdlPv>

08002c04 <_Znwj>:
 8002c04:	2801      	cmp	r0, #1
 8002c06:	bf38      	it	cc
 8002c08:	2001      	movcc	r0, #1
 8002c0a:	b510      	push	{r4, lr}
 8002c0c:	4604      	mov	r4, r0
 8002c0e:	4620      	mov	r0, r4
 8002c10:	f000 f846 	bl	8002ca0 <malloc>
 8002c14:	b930      	cbnz	r0, 8002c24 <_Znwj+0x20>
 8002c16:	f000 f809 	bl	8002c2c <_ZSt15get_new_handlerv>
 8002c1a:	b908      	cbnz	r0, 8002c20 <_Znwj+0x1c>
 8002c1c:	f000 f80e 	bl	8002c3c <abort>
 8002c20:	4780      	blx	r0
 8002c22:	e7f4      	b.n	8002c0e <_Znwj+0xa>
 8002c24:	bd10      	pop	{r4, pc}

08002c26 <_ZdlPv>:
 8002c26:	f000 b843 	b.w	8002cb0 <free>
	...

08002c2c <_ZSt15get_new_handlerv>:
 8002c2c:	4b02      	ldr	r3, [pc, #8]	; (8002c38 <_ZSt15get_new_handlerv+0xc>)
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	f3bf 8f5b 	dmb	ish
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	20000148 	.word	0x20000148

08002c3c <abort>:
 8002c3c:	b508      	push	{r3, lr}
 8002c3e:	2006      	movs	r0, #6
 8002c40:	f000 f928 	bl	8002e94 <raise>
 8002c44:	2001      	movs	r0, #1
 8002c46:	f7fd ff97 	bl	8000b78 <_exit>
	...

08002c4c <__errno>:
 8002c4c:	4b01      	ldr	r3, [pc, #4]	; (8002c54 <__errno+0x8>)
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	2000000c 	.word	0x2000000c

08002c58 <__libc_init_array>:
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	4d0d      	ldr	r5, [pc, #52]	; (8002c90 <__libc_init_array+0x38>)
 8002c5c:	4c0d      	ldr	r4, [pc, #52]	; (8002c94 <__libc_init_array+0x3c>)
 8002c5e:	1b64      	subs	r4, r4, r5
 8002c60:	10a4      	asrs	r4, r4, #2
 8002c62:	2600      	movs	r6, #0
 8002c64:	42a6      	cmp	r6, r4
 8002c66:	d109      	bne.n	8002c7c <__libc_init_array+0x24>
 8002c68:	4d0b      	ldr	r5, [pc, #44]	; (8002c98 <__libc_init_array+0x40>)
 8002c6a:	4c0c      	ldr	r4, [pc, #48]	; (8002c9c <__libc_init_array+0x44>)
 8002c6c:	f000 f93c 	bl	8002ee8 <_init>
 8002c70:	1b64      	subs	r4, r4, r5
 8002c72:	10a4      	asrs	r4, r4, #2
 8002c74:	2600      	movs	r6, #0
 8002c76:	42a6      	cmp	r6, r4
 8002c78:	d105      	bne.n	8002c86 <__libc_init_array+0x2e>
 8002c7a:	bd70      	pop	{r4, r5, r6, pc}
 8002c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c80:	4798      	blx	r3
 8002c82:	3601      	adds	r6, #1
 8002c84:	e7ee      	b.n	8002c64 <__libc_init_array+0xc>
 8002c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c8a:	4798      	blx	r3
 8002c8c:	3601      	adds	r6, #1
 8002c8e:	e7f2      	b.n	8002c76 <__libc_init_array+0x1e>
 8002c90:	08002f40 	.word	0x08002f40
 8002c94:	08002f40 	.word	0x08002f40
 8002c98:	08002f40 	.word	0x08002f40
 8002c9c:	08002f44 	.word	0x08002f44

08002ca0 <malloc>:
 8002ca0:	4b02      	ldr	r3, [pc, #8]	; (8002cac <malloc+0xc>)
 8002ca2:	4601      	mov	r1, r0
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	f000 b863 	b.w	8002d70 <_malloc_r>
 8002caa:	bf00      	nop
 8002cac:	2000000c 	.word	0x2000000c

08002cb0 <free>:
 8002cb0:	4b02      	ldr	r3, [pc, #8]	; (8002cbc <free+0xc>)
 8002cb2:	4601      	mov	r1, r0
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	f000 b80b 	b.w	8002cd0 <_free_r>
 8002cba:	bf00      	nop
 8002cbc:	2000000c 	.word	0x2000000c

08002cc0 <memset>:
 8002cc0:	4402      	add	r2, r0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d100      	bne.n	8002cca <memset+0xa>
 8002cc8:	4770      	bx	lr
 8002cca:	f803 1b01 	strb.w	r1, [r3], #1
 8002cce:	e7f9      	b.n	8002cc4 <memset+0x4>

08002cd0 <_free_r>:
 8002cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002cd2:	2900      	cmp	r1, #0
 8002cd4:	d048      	beq.n	8002d68 <_free_r+0x98>
 8002cd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cda:	9001      	str	r0, [sp, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f1a1 0404 	sub.w	r4, r1, #4
 8002ce2:	bfb8      	it	lt
 8002ce4:	18e4      	addlt	r4, r4, r3
 8002ce6:	f000 f8f1 	bl	8002ecc <__malloc_lock>
 8002cea:	4a20      	ldr	r2, [pc, #128]	; (8002d6c <_free_r+0x9c>)
 8002cec:	9801      	ldr	r0, [sp, #4]
 8002cee:	6813      	ldr	r3, [r2, #0]
 8002cf0:	4615      	mov	r5, r2
 8002cf2:	b933      	cbnz	r3, 8002d02 <_free_r+0x32>
 8002cf4:	6063      	str	r3, [r4, #4]
 8002cf6:	6014      	str	r4, [r2, #0]
 8002cf8:	b003      	add	sp, #12
 8002cfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002cfe:	f000 b8eb 	b.w	8002ed8 <__malloc_unlock>
 8002d02:	42a3      	cmp	r3, r4
 8002d04:	d90b      	bls.n	8002d1e <_free_r+0x4e>
 8002d06:	6821      	ldr	r1, [r4, #0]
 8002d08:	1862      	adds	r2, r4, r1
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	bf04      	itt	eq
 8002d0e:	681a      	ldreq	r2, [r3, #0]
 8002d10:	685b      	ldreq	r3, [r3, #4]
 8002d12:	6063      	str	r3, [r4, #4]
 8002d14:	bf04      	itt	eq
 8002d16:	1852      	addeq	r2, r2, r1
 8002d18:	6022      	streq	r2, [r4, #0]
 8002d1a:	602c      	str	r4, [r5, #0]
 8002d1c:	e7ec      	b.n	8002cf8 <_free_r+0x28>
 8002d1e:	461a      	mov	r2, r3
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	b10b      	cbz	r3, 8002d28 <_free_r+0x58>
 8002d24:	42a3      	cmp	r3, r4
 8002d26:	d9fa      	bls.n	8002d1e <_free_r+0x4e>
 8002d28:	6811      	ldr	r1, [r2, #0]
 8002d2a:	1855      	adds	r5, r2, r1
 8002d2c:	42a5      	cmp	r5, r4
 8002d2e:	d10b      	bne.n	8002d48 <_free_r+0x78>
 8002d30:	6824      	ldr	r4, [r4, #0]
 8002d32:	4421      	add	r1, r4
 8002d34:	1854      	adds	r4, r2, r1
 8002d36:	42a3      	cmp	r3, r4
 8002d38:	6011      	str	r1, [r2, #0]
 8002d3a:	d1dd      	bne.n	8002cf8 <_free_r+0x28>
 8002d3c:	681c      	ldr	r4, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	6053      	str	r3, [r2, #4]
 8002d42:	4421      	add	r1, r4
 8002d44:	6011      	str	r1, [r2, #0]
 8002d46:	e7d7      	b.n	8002cf8 <_free_r+0x28>
 8002d48:	d902      	bls.n	8002d50 <_free_r+0x80>
 8002d4a:	230c      	movs	r3, #12
 8002d4c:	6003      	str	r3, [r0, #0]
 8002d4e:	e7d3      	b.n	8002cf8 <_free_r+0x28>
 8002d50:	6825      	ldr	r5, [r4, #0]
 8002d52:	1961      	adds	r1, r4, r5
 8002d54:	428b      	cmp	r3, r1
 8002d56:	bf04      	itt	eq
 8002d58:	6819      	ldreq	r1, [r3, #0]
 8002d5a:	685b      	ldreq	r3, [r3, #4]
 8002d5c:	6063      	str	r3, [r4, #4]
 8002d5e:	bf04      	itt	eq
 8002d60:	1949      	addeq	r1, r1, r5
 8002d62:	6021      	streq	r1, [r4, #0]
 8002d64:	6054      	str	r4, [r2, #4]
 8002d66:	e7c7      	b.n	8002cf8 <_free_r+0x28>
 8002d68:	b003      	add	sp, #12
 8002d6a:	bd30      	pop	{r4, r5, pc}
 8002d6c:	2000014c 	.word	0x2000014c

08002d70 <_malloc_r>:
 8002d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d72:	1ccd      	adds	r5, r1, #3
 8002d74:	f025 0503 	bic.w	r5, r5, #3
 8002d78:	3508      	adds	r5, #8
 8002d7a:	2d0c      	cmp	r5, #12
 8002d7c:	bf38      	it	cc
 8002d7e:	250c      	movcc	r5, #12
 8002d80:	2d00      	cmp	r5, #0
 8002d82:	4606      	mov	r6, r0
 8002d84:	db01      	blt.n	8002d8a <_malloc_r+0x1a>
 8002d86:	42a9      	cmp	r1, r5
 8002d88:	d903      	bls.n	8002d92 <_malloc_r+0x22>
 8002d8a:	230c      	movs	r3, #12
 8002d8c:	6033      	str	r3, [r6, #0]
 8002d8e:	2000      	movs	r0, #0
 8002d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d92:	f000 f89b 	bl	8002ecc <__malloc_lock>
 8002d96:	4921      	ldr	r1, [pc, #132]	; (8002e1c <_malloc_r+0xac>)
 8002d98:	680a      	ldr	r2, [r1, #0]
 8002d9a:	4614      	mov	r4, r2
 8002d9c:	b99c      	cbnz	r4, 8002dc6 <_malloc_r+0x56>
 8002d9e:	4f20      	ldr	r7, [pc, #128]	; (8002e20 <_malloc_r+0xb0>)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	b923      	cbnz	r3, 8002dae <_malloc_r+0x3e>
 8002da4:	4621      	mov	r1, r4
 8002da6:	4630      	mov	r0, r6
 8002da8:	f000 f83c 	bl	8002e24 <_sbrk_r>
 8002dac:	6038      	str	r0, [r7, #0]
 8002dae:	4629      	mov	r1, r5
 8002db0:	4630      	mov	r0, r6
 8002db2:	f000 f837 	bl	8002e24 <_sbrk_r>
 8002db6:	1c43      	adds	r3, r0, #1
 8002db8:	d123      	bne.n	8002e02 <_malloc_r+0x92>
 8002dba:	230c      	movs	r3, #12
 8002dbc:	6033      	str	r3, [r6, #0]
 8002dbe:	4630      	mov	r0, r6
 8002dc0:	f000 f88a 	bl	8002ed8 <__malloc_unlock>
 8002dc4:	e7e3      	b.n	8002d8e <_malloc_r+0x1e>
 8002dc6:	6823      	ldr	r3, [r4, #0]
 8002dc8:	1b5b      	subs	r3, r3, r5
 8002dca:	d417      	bmi.n	8002dfc <_malloc_r+0x8c>
 8002dcc:	2b0b      	cmp	r3, #11
 8002dce:	d903      	bls.n	8002dd8 <_malloc_r+0x68>
 8002dd0:	6023      	str	r3, [r4, #0]
 8002dd2:	441c      	add	r4, r3
 8002dd4:	6025      	str	r5, [r4, #0]
 8002dd6:	e004      	b.n	8002de2 <_malloc_r+0x72>
 8002dd8:	6863      	ldr	r3, [r4, #4]
 8002dda:	42a2      	cmp	r2, r4
 8002ddc:	bf0c      	ite	eq
 8002dde:	600b      	streq	r3, [r1, #0]
 8002de0:	6053      	strne	r3, [r2, #4]
 8002de2:	4630      	mov	r0, r6
 8002de4:	f000 f878 	bl	8002ed8 <__malloc_unlock>
 8002de8:	f104 000b 	add.w	r0, r4, #11
 8002dec:	1d23      	adds	r3, r4, #4
 8002dee:	f020 0007 	bic.w	r0, r0, #7
 8002df2:	1ac2      	subs	r2, r0, r3
 8002df4:	d0cc      	beq.n	8002d90 <_malloc_r+0x20>
 8002df6:	1a1b      	subs	r3, r3, r0
 8002df8:	50a3      	str	r3, [r4, r2]
 8002dfa:	e7c9      	b.n	8002d90 <_malloc_r+0x20>
 8002dfc:	4622      	mov	r2, r4
 8002dfe:	6864      	ldr	r4, [r4, #4]
 8002e00:	e7cc      	b.n	8002d9c <_malloc_r+0x2c>
 8002e02:	1cc4      	adds	r4, r0, #3
 8002e04:	f024 0403 	bic.w	r4, r4, #3
 8002e08:	42a0      	cmp	r0, r4
 8002e0a:	d0e3      	beq.n	8002dd4 <_malloc_r+0x64>
 8002e0c:	1a21      	subs	r1, r4, r0
 8002e0e:	4630      	mov	r0, r6
 8002e10:	f000 f808 	bl	8002e24 <_sbrk_r>
 8002e14:	3001      	adds	r0, #1
 8002e16:	d1dd      	bne.n	8002dd4 <_malloc_r+0x64>
 8002e18:	e7cf      	b.n	8002dba <_malloc_r+0x4a>
 8002e1a:	bf00      	nop
 8002e1c:	2000014c 	.word	0x2000014c
 8002e20:	20000150 	.word	0x20000150

08002e24 <_sbrk_r>:
 8002e24:	b538      	push	{r3, r4, r5, lr}
 8002e26:	4d06      	ldr	r5, [pc, #24]	; (8002e40 <_sbrk_r+0x1c>)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	4604      	mov	r4, r0
 8002e2c:	4608      	mov	r0, r1
 8002e2e:	602b      	str	r3, [r5, #0]
 8002e30:	f7fd feac 	bl	8000b8c <_sbrk>
 8002e34:	1c43      	adds	r3, r0, #1
 8002e36:	d102      	bne.n	8002e3e <_sbrk_r+0x1a>
 8002e38:	682b      	ldr	r3, [r5, #0]
 8002e3a:	b103      	cbz	r3, 8002e3e <_sbrk_r+0x1a>
 8002e3c:	6023      	str	r3, [r4, #0]
 8002e3e:	bd38      	pop	{r3, r4, r5, pc}
 8002e40:	20000158 	.word	0x20000158

08002e44 <_raise_r>:
 8002e44:	291f      	cmp	r1, #31
 8002e46:	b538      	push	{r3, r4, r5, lr}
 8002e48:	4604      	mov	r4, r0
 8002e4a:	460d      	mov	r5, r1
 8002e4c:	d904      	bls.n	8002e58 <_raise_r+0x14>
 8002e4e:	2316      	movs	r3, #22
 8002e50:	6003      	str	r3, [r0, #0]
 8002e52:	f04f 30ff 	mov.w	r0, #4294967295
 8002e56:	bd38      	pop	{r3, r4, r5, pc}
 8002e58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002e5a:	b112      	cbz	r2, 8002e62 <_raise_r+0x1e>
 8002e5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002e60:	b94b      	cbnz	r3, 8002e76 <_raise_r+0x32>
 8002e62:	4620      	mov	r0, r4
 8002e64:	f000 f830 	bl	8002ec8 <_getpid_r>
 8002e68:	462a      	mov	r2, r5
 8002e6a:	4601      	mov	r1, r0
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e72:	f000 b817 	b.w	8002ea4 <_kill_r>
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d00a      	beq.n	8002e90 <_raise_r+0x4c>
 8002e7a:	1c59      	adds	r1, r3, #1
 8002e7c:	d103      	bne.n	8002e86 <_raise_r+0x42>
 8002e7e:	2316      	movs	r3, #22
 8002e80:	6003      	str	r3, [r0, #0]
 8002e82:	2001      	movs	r0, #1
 8002e84:	e7e7      	b.n	8002e56 <_raise_r+0x12>
 8002e86:	2400      	movs	r4, #0
 8002e88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	4798      	blx	r3
 8002e90:	2000      	movs	r0, #0
 8002e92:	e7e0      	b.n	8002e56 <_raise_r+0x12>

08002e94 <raise>:
 8002e94:	4b02      	ldr	r3, [pc, #8]	; (8002ea0 <raise+0xc>)
 8002e96:	4601      	mov	r1, r0
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	f7ff bfd3 	b.w	8002e44 <_raise_r>
 8002e9e:	bf00      	nop
 8002ea0:	2000000c 	.word	0x2000000c

08002ea4 <_kill_r>:
 8002ea4:	b538      	push	{r3, r4, r5, lr}
 8002ea6:	4d07      	ldr	r5, [pc, #28]	; (8002ec4 <_kill_r+0x20>)
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	4604      	mov	r4, r0
 8002eac:	4608      	mov	r0, r1
 8002eae:	4611      	mov	r1, r2
 8002eb0:	602b      	str	r3, [r5, #0]
 8002eb2:	f7fd fe51 	bl	8000b58 <_kill>
 8002eb6:	1c43      	adds	r3, r0, #1
 8002eb8:	d102      	bne.n	8002ec0 <_kill_r+0x1c>
 8002eba:	682b      	ldr	r3, [r5, #0]
 8002ebc:	b103      	cbz	r3, 8002ec0 <_kill_r+0x1c>
 8002ebe:	6023      	str	r3, [r4, #0]
 8002ec0:	bd38      	pop	{r3, r4, r5, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000158 	.word	0x20000158

08002ec8 <_getpid_r>:
 8002ec8:	f7fd be3e 	b.w	8000b48 <_getpid>

08002ecc <__malloc_lock>:
 8002ecc:	4801      	ldr	r0, [pc, #4]	; (8002ed4 <__malloc_lock+0x8>)
 8002ece:	f000 b809 	b.w	8002ee4 <__retarget_lock_acquire_recursive>
 8002ed2:	bf00      	nop
 8002ed4:	20000160 	.word	0x20000160

08002ed8 <__malloc_unlock>:
 8002ed8:	4801      	ldr	r0, [pc, #4]	; (8002ee0 <__malloc_unlock+0x8>)
 8002eda:	f000 b804 	b.w	8002ee6 <__retarget_lock_release_recursive>
 8002ede:	bf00      	nop
 8002ee0:	20000160 	.word	0x20000160

08002ee4 <__retarget_lock_acquire_recursive>:
 8002ee4:	4770      	bx	lr

08002ee6 <__retarget_lock_release_recursive>:
 8002ee6:	4770      	bx	lr

08002ee8 <_init>:
 8002ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eea:	bf00      	nop
 8002eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eee:	bc08      	pop	{r3}
 8002ef0:	469e      	mov	lr, r3
 8002ef2:	4770      	bx	lr

08002ef4 <_fini>:
 8002ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef6:	bf00      	nop
 8002ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002efa:	bc08      	pop	{r3}
 8002efc:	469e      	mov	lr, r3
 8002efe:	4770      	bx	lr
